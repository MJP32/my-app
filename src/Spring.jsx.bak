import { useState } from 'react'

// Simple syntax highlighter for Java code
const SyntaxHighlighter = ({ code }) => {
  const highlightJava = (code) => {
    let highlighted = code
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')

    // Store protected content with placeholders
    const protectedContent = []
    let placeholder = 0

    // Protect comments first
    highlighted = highlighted.replace(/(\/\/.*$|\/\*[\s\S]*?\*\/)/gm, (match) => {
      const id = `___COMMENT_${placeholder++}___`
      protectedContent.push({ id, replacement: `<span style="color: #6a9955; font-style: italic;">${match}</span>` })
      return id
    })

    // Protect strings
    highlighted = highlighted.replace(/(["'])(?:(?=(\\?))\2.)*?\1/g, (match) => {
      const id = `___STRING_${placeholder++}___`
      protectedContent.push({ id, replacement: `<span style="color: #ce9178;">${match}</span>` })
      return id
    })

    // Apply syntax highlighting to remaining code
    highlighted = highlighted
      // Keywords - purple
      .replace(/\b(public|private|protected|static|final|class|interface|extends|implements|new|return|if|else|for|while|do|switch|case|break|continue|try|catch|finally|throw|throws|import|package|void|abstract|synchronized|volatile|transient|native|strictfp|super|this|null)\b/g, '<span style="color: #c586c0;">$1</span>')

      // Boolean and primitives - blue
      .replace(/\b(true|false|int|double|float|long|short|byte|char|boolean)\b/g, '<span style="color: #569cd6;">$1</span>')

      // Types and classes - light green
      .replace(/\b(String|List|ArrayList|LinkedList|HashMap|TreeMap|HashSet|TreeSet|Map|Set|Queue|Deque|Collection|Arrays|Collections|Thread|Runnable|Executor|ExecutorService|CompletableFuture|Stream|Optional|Path|Files|Pattern|Matcher|StringBuilder|StringBuffer|Integer|Double|Float|Long|Short|Byte|Character|Boolean|Object|System|Math|Scanner|BufferedReader|FileReader|FileWriter|PrintWriter|InputStream|OutputStream|Exception|RuntimeException|IOException|SQLException|WeakReference|SoftReference|PhantomReference|ReferenceQueue)\b/g, '<span style="color: #4ec9b0;">$1</span>')

      // Annotations - yellow
      .replace(/(@\w+)/g, '<span style="color: #dcdcaa;">$1</span>')

      // Numbers - light green
      .replace(/\b(\d+\.?\d*[fLdD]?)\b/g, '<span style="color: #b5cea8;">$1</span>')

      // Method calls - yellow
      .replace(/\b([a-z_]\w*)\s*\(/g, '<span style="color: #dcdcaa;">$1</span>(')

    // Restore protected content
    protectedContent.forEach(({ id, replacement }) => {
      highlighted = highlighted.replace(id, replacement)
    })

    return highlighted
  }

  return (
    <pre style={{
      margin: 0,
      fontFamily: '"Consolas", "Monaco", "Courier New", monospace',
      fontSize: '0.85rem',
      lineHeight: '1.6',
      color: '#d4d4d4',
      whiteSpace: 'pre',
      overflowX: 'auto',
      textAlign: 'left',
      padding: 0
    }}>
      <code dangerouslySetInnerHTML={{ __html: highlightJava(code) }} />
    </pre>
  )
}

const ModernDiagram = ({ components, onComponentClick, title, width = 1400, height = 800, containerWidth = 1800 }) => {
  const [hoveredComponent, setHoveredComponent] = useState(null)

  return (
    <div style={{
      width: '100%',
      maxWidth: `${containerWidth}px`,
      margin: '0 auto',
      backgroundColor: '#f8fafc',
      borderRadius: '16px',
      padding: '2rem',
      boxShadow: '0 10px 30px -5px rgba(0, 0, 0, 0.1)',
      border: '2px solid #e2e8f0'
    }}>
      <h3 style={{
        textAlign: 'center',
        marginBottom: '2rem',
        fontSize: '1.75rem',
        fontWeight: '800',
        color: '#1e293b',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }}>
        {title}
      </h3>

      <svg width="100%" height={height} viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>
        <defs>
          <linearGradient id="greenGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#10b981" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#059669" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#3b82f6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#1e40af" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#7c3aed" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="orangeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#f59e0b" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#d97706" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="tealGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#14b8a6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#0d9488" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ef4444" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#dc2626" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="indigoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#6366f1" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#4f46e5" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="pinkGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ec4899" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#db2777" stopOpacity="0.9"/>
          </linearGradient>
        </defs>

        {/* Connecting lines */}
        <g stroke="#64748b" strokeWidth="4" strokeOpacity="0.7" fill="none">
          <line x1="200" y1="300" x2="600" y2="200" strokeDasharray="10,5"/>
          <line x1="200" y1="300" x2="600" y2="400" strokeDasharray="10,5"/>
          <line x1="800" y1="200" x2="1200" y2="300" strokeDasharray="10,5"/>
          <line x1="600" y1="400" x2="1000" y2="300" strokeDasharray="10,5"/>
          <line x1="200" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
          <line x1="800" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
        </g>

        {/* Component rectangles */}
        {components.map((component) => (
          <g key={component.id}>
            <rect
              x={component.x}
              y={component.y}
              width={component.width}
              height={component.height}
              rx="12"
              ry="12"
              fill={`url(#${component.color}Gradient)`}
              stroke={hoveredComponent === component.id ? '#1e293b' : '#64748b'}
              strokeWidth={hoveredComponent === component.id ? '4' : '2'}
              style={{
                cursor: 'pointer',
                filter: hoveredComponent === component.id ? 'drop-shadow(0 8px 16px rgba(0,0,0,0.2))' : 'drop-shadow(0 4px 8px rgba(0,0,0,0.1))',
                transform: hoveredComponent === component.id ? 'scale(1.02)' : 'scale(1)',
                transformOrigin: `${component.x + component.width/2}px ${component.y + component.height/2}px`,
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={() => setHoveredComponent(component.id)}
              onMouseLeave={() => setHoveredComponent(null)}
              onClick={() => onComponentClick && onComponentClick(component)}
            />

            {/* Icon */}
            <text
              x={component.x + component.width/2}
              y={component.y + 35}
              textAnchor="middle"
              fontSize="48"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.icon}
            </text>

            {/* Title */}
            <text
              x={component.x + component.width/2}
              y={component.y + 75}
              textAnchor="middle"
              fontSize="18"
              fontWeight="700"
              fill="white"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.title}
            </text>

            {/* Details */}
            {component.details && component.details.slice(0, 3).map((detail, idx) => (
              <text
                key={idx}
                x={component.x + component.width/2}
                y={component.y + 100 + (idx * 15)}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.9)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                {detail.name.length > 18 ? detail.name.substring(0, 15) + '...' : detail.name}
              </text>
            ))}
            {component.details && component.details.length > 3 && (
              <text
                x={component.x + component.width/2}
                y={component.y + 145}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.7)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                +{component.details.length - 3} more features...
              </text>
            )}
          </g>
        ))}
      </svg>
    </div>
  )
}

function Spring({ onBack }) {
  const [selectedComponent, setSelectedComponent] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedConcept, setSelectedConcept] = useState(null)

  const components = [
    {
      id: 'spring-boot', x: 80, y: 240, width: 350, height: 160,
      icon: '🚀', title: 'Spring Boot', color: 'green',
      details: [
        {
          name: 'Auto-Configuration',
          explanation: 'Spring Boot automatically configures application based on dependencies in classpath. Reduces boilerplate configuration dramatically. Conditional bean creation based on presence of classes. Opinionated defaults with override capability. @SpringBootApplication combines @Configuration, @EnableAutoConfiguration, @ComponentScan.',
          codeExample: `import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

// @SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan
@SpringBootApplication
public class MyApplication {
  public static void main(String[] args) {
    SpringApplication.run(MyApplication.class, args);
  }
}
// Output: Application started on port 8080

// Custom auto-configuration
@Configuration
@ConditionalOnClass(DataSource.class)
@ConditionalOnMissingBean(DataSource.class)
public class DataSourceAutoConfiguration {

  @Bean
  public DataSource dataSource() {
    HikariDataSource dataSource = new HikariDataSource();
    dataSource.setJdbcUrl("jdbc:h2:mem:testdb");
    dataSource.setUsername("sa");
    dataSource.setPassword("");
    return dataSource;
  }
}
// Auto-configured only if DataSource class exists and no DataSource bean defined

// Conditional beans
@Configuration
public class MyConfiguration {

  @Bean
  @ConditionalOnProperty(name = "app.feature.enabled", havingValue = "true")
  public FeatureService featureService() {
    return new FeatureService();
  }

  @Bean
  @Profile("dev")
  public DataSource devDataSource() {
    return new H2DataSource();
  }

  @Bean
  @Profile("prod")
  public DataSource prodDataSource() {
    return new PostgresDataSource();
  }
}

// Excluding auto-configurations
@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
public class CustomApplication {
  public static void main(String[] args) {
    SpringApplication.run(CustomApplication.class, args);
  }
}
// Output: Application started without DataSource auto-configuration`
        },
        {
          name: 'Starter Dependencies',
          explanation: 'Curated sets of dependencies for common use cases. spring-boot-starter-web includes Tomcat, Spring MVC, Jackson. spring-boot-starter-data-jpa includes Hibernate, Spring Data JPA. Eliminates version management complexity. Ensures compatible dependency versions.',
          codeExample: `// pom.xml - Maven starter dependencies
/*
<dependencies>
  <!-- Web starter: Tomcat, Spring MVC, Jackson, Validation -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
  </dependency>

  <!-- JPA starter: Hibernate, Spring Data JPA, JDBC -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
  </dependency>

  <!-- Security starter: Spring Security, OAuth2 -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
  </dependency>

  <!-- Test starter: JUnit, Mockito, AssertJ, Spring Test -->
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
  </dependency>
</dependencies>
*/

// REST Controller with web starter
@RestController
@RequestMapping("/api")
public class UserController {

  @Autowired
  private UserRepository userRepository;

  @GetMapping("/users")
  public List<User> getUsers() {
    return userRepository.findAll();
  }

  @PostMapping("/users")
  public User createUser(@RequestBody User user) {
    return userRepository.save(user);
  }
}
// Output: GET /api/users returns JSON array

// JPA Entity with data-jpa starter
@Entity
@Table(name = "users")
public class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private String name;
  private String email;

  // Getters and setters
}

// Repository interface - no implementation needed
public interface UserRepository extends JpaRepository<User, Long> {
  List<User> findByName(String name);
  Optional<User> findByEmail(String email);
}
// Output: Automatic CRUD operations + custom queries

// Testing with test starter
@SpringBootTest
@AutoConfigureMockMvc
class UserControllerTest {

  @Autowired
  private MockMvc mockMvc;

  @Test
  void testGetUsers() throws Exception {
    mockMvc.perform(get("/api/users"))
      .andExpect(status().isOk())
      .andExpect(content().contentType(MediaType.APPLICATION_JSON));
  }
}
// Output: Test passed`
        },
        {
          name: 'Embedded Servers',
          explanation: 'Embedded Tomcat, Jetty, or Undertow. No need for separate application server deployment. Standalone executable JAR with java -jar command. Simplifies deployment and development. Easy containerization for Docker and Kubernetes.',
          codeExample: `// Default embedded Tomcat (included in spring-boot-starter-web)
@SpringBootApplication
public class EmbeddedServerApp {
  public static void main(String[] args) {
    SpringApplication.run(EmbeddedServerApp.class, args);
  }
}
// Output: Tomcat started on port 8080

// application.properties - Server configuration
/*
server.port=9090
server.servlet.context-path=/myapp
server.tomcat.max-threads=200
server.tomcat.max-connections=10000
server.compression.enabled=true
*/

// Programmatic server configuration
@Configuration
public class ServerConfig {

  @Bean
  public WebServerFactoryCustomizer<TomcatServletWebServerFactory>
      customizer() {
    return factory -> {
      factory.setPort(9090);
      factory.setContextPath("/myapp");
      factory.addConnectorCustomizers(connector -> {
        connector.setMaxThreads(200);
      });
    };
  }
}

// Switch to Jetty (exclude Tomcat, add Jetty)
/*
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
  <exclusions>
    <exclusion>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
    </exclusion>
  </exclusions>
</dependency>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-jetty</artifactId>
</dependency>
*/

// SSL/HTTPS configuration
/*
server.port=8443
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=password
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=tomcat
*/

// Building executable JAR
// mvn clean package
// java -jar target/myapp.jar
// Output: Application running on embedded Tomcat at https://localhost:8443

// Docker deployment
/*
FROM openjdk:17-jdk-slim
COPY target/myapp.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "/app.jar"]
*/
// docker build -t myapp:latest .
// docker run -p 8080:8080 myapp:latest
// Output: Containerized app running on port 8080`
        },
        {
          name: 'Actuator',
          explanation: 'Production-ready features for monitoring and management. Health checks, metrics, info endpoints. JMX and HTTP exposure. Integration with Prometheus, Grafana. Custom endpoints and metrics support. Essential for microservices observability.',
          codeExample: `// Add actuator dependency
/*
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
*/

// application.properties - Enable actuator endpoints
/*
management.endpoints.web.exposure.include=health,info,metrics,env,beans
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true
*/

// Access health endpoint
// GET http://localhost:8080/actuator/health
/*
{
  "status": "UP",
  "components": {
    "db": {"status": "UP", "details": {"database": "H2"}},
    "diskSpace": {"status": "UP", "details": {"free": "100GB"}}
  }
}
*/

// Custom health indicator
@Component
public class CustomHealthIndicator implements HealthIndicator {

  @Override
  public Health health() {
    boolean healthy = checkExternalService();
    if (healthy) {
      return Health.up()
        .withDetail("service", "available")
        .build();
    }
    return Health.down()
      .withDetail("service", "unavailable")
      .withDetail("error", "Connection timeout")
      .build();
  }

  private boolean checkExternalService() {
    // Check external service health
    return true;
  }
}
// Output: /actuator/health includes custom indicator

// Custom metrics
@Service
public class OrderService {

  private final Counter orderCounter;
  private final Timer orderTimer;

  public OrderService(MeterRegistry registry) {
    this.orderCounter = Counter.builder("orders.created")
      .description("Total orders created")
      .tag("type", "online")
      .register(registry);

    this.orderTimer = Timer.builder("orders.processing.time")
      .description("Order processing time")
      .register(registry);
  }

  public Order createOrder(Order order) {
    return orderTimer.record(() -> {
      Order saved = orderRepository.save(order);
      orderCounter.increment();
      return saved;
    });
  }
}
// Output: /actuator/metrics/orders.created

// Custom actuator endpoint
@Component
@Endpoint(id = "custom")
public class CustomEndpoint {

  @ReadOperation
  public Map<String, Object> customInfo() {
    Map<String, Object> info = new HashMap<>();
    info.put("version", "1.0.0");
    info.put("environment", "production");
    info.put("uptime", getUptime());
    return info;
  }

  @WriteOperation
  public void resetCache() {
    // Reset application cache
    System.out.println("Cache reset");
  }
}
// Output: GET /actuator/custom returns custom info
// Output: POST /actuator/custom resets cache

// Prometheus metrics endpoint
// GET http://localhost:8080/actuator/prometheus
/*
# HELP orders_created_total Total orders created
# TYPE orders_created_total counter
orders_created_total{type="online"} 150.0

# HELP orders_processing_time_seconds Order processing time
# TYPE orders_processing_time_seconds summary
orders_processing_time_seconds_count 150
orders_processing_time_seconds_sum 45.5
*/`
        },
        {
          name: 'DevTools',
          explanation: 'Automatic application restart on code changes. LiveReload integration for browser refresh. Property defaults for development. Caching disabled in development. Faster development feedback loop.',
          codeExample: `// Add DevTools dependency (automatically disabled in production)
/*
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-devtools</artifactId>
  <optional>true</optional>
</dependency>
*/

// Automatic restart demonstration
@RestController
public class HelloController {

  @GetMapping("/hello")
  public String hello() {
    return "Hello, World!";
  }
}
// Modify return value to "Hello, Spring Boot!"
// Save file
// Output: Application automatically restarts
// Output: GET /hello returns "Hello, Spring Boot!"

// DevTools configuration
// application-dev.properties
/*
spring.devtools.restart.enabled=true
spring.devtools.restart.additional-paths=src/main/resources
spring.devtools.restart.exclude=static/**,public/**
spring.devtools.livereload.enabled=true
spring.devtools.livereload.port=35729
*/

// Restart vs Reload
// Restart: Full application context refresh (code changes)
// Reload: Static resources only (HTML, CSS, JS)

// Trigger restart programmatically
@Component
public class RestartService {

  @Autowired
  private RestartEndpoint restartEndpoint;

  public void triggerRestart() {
    restartEndpoint.restart();
    System.out.println("Application restarting...");
  }
}

// Remote DevTools (for cloud deployments)
/*
spring.devtools.remote.secret=mysecret
spring.devtools.remote.context-path=/devtools
*/
// java -jar spring-boot-devtools.jar http://localhost:8080

// Exclude from restart
@Component
public class StaticDataLoader {

  @PostConstruct
  public void loadData() {
    // This won't reload on restart
    System.out.println("Loading static data once");
  }
}

// Development property defaults
// DevTools automatically sets:
/*
spring.thymeleaf.cache=false
spring.freemarker.cache=false
spring.groovy.template.cache=false
spring.h2.console.enabled=true
server.error.include-message=always
server.error.include-binding-errors=always
*/

// Performance improvement
// Before DevTools: Code change -> Stop -> Compile -> Start (30-60 seconds)
// With DevTools: Code change -> Save -> Auto-restart (5-10 seconds)
// Output: 6x faster development cycle

// LiveReload browser extension integration
// Install LiveReload extension
// Make changes to HTML/CSS
// Output: Browser automatically refreshes`
        },
        {
          name: 'Configuration Properties',
          explanation: '@ConfigurationProperties for type-safe configuration. Externalized configuration via application.properties/yml. Profile-specific configurations. Environment variable overrides. Validation with JSR-303 annotations.',
          codeExample: `// application.yml
/*
app:
  name: MyApplication
  version: 1.0.0
  security:
    jwt-secret: secret-key
    token-expiration: 3600
  email:
    host: smtp.gmail.com
    port: 587
    username: user@example.com
    password: password
*/

// Type-safe configuration properties
@Component
@ConfigurationProperties(prefix = "app")
@Validated
public class AppProperties {

  @NotNull
  private String name;

  @NotNull
  private String version;

  private Security security = new Security();
  private Email email = new Email();

  // Getters and setters

  public static class Security {
    @NotBlank
    private String jwtSecret;

    @Min(60)
    @Max(86400)
    private int tokenExpiration;

    // Getters and setters
  }

  public static class Email {
    private String host;
    private int port;
    private String username;
    private String password;

    // Getters and setters
  }
}

// Enable configuration properties
@SpringBootApplication
@EnableConfigurationProperties(AppProperties.class)
public class Application {
  public static void main(String[] args) {
    SpringApplication.run(Application.class, args);
  }
}

// Using configuration properties
@Service
public class JwtService {

  @Autowired
  private AppProperties appProperties;

  public String generateToken(String username) {
    String secret = appProperties.getSecurity().getJwtSecret();
    int expiration = appProperties.getSecurity().getTokenExpiration();

    return Jwts.builder()
      .setSubject(username)
      .setExpiration(new Date(System.currentTimeMillis() + expiration * 1000))
      .signWith(SignatureAlgorithm.HS512, secret)
      .compact();
  }
}
// Output: JWT token with configured secret and expiration

// Profile-specific configuration
// application-dev.yml
/*
app:
  security:
    jwt-secret: dev-secret
logging:
  level:
    root: DEBUG
*/

// application-prod.yml
/*
app:
  security:
    jwt-secret: prod-secret-from-vault
logging:
  level:
    root: WARN
*/

// Activate profile
// java -jar app.jar --spring.profiles.active=prod

// Environment variable override
// export APP_SECURITY_JWT_SECRET=env-secret
// export APP_SECURITY_TOKEN_EXPIRATION=7200
// java -jar app.jar
// Output: Environment variables override application.yml

// @Value annotation (for simple cases)
@Component
public class SimpleConfig {

  @Value("\${app.name}")
  private String appName;

  @Value("\${app.version:1.0.0}")  // Default value
  private String version;

  @Value("\${app.features:feature1,feature2}")
  private List<String> features;

  public void printConfig() {
    System.out.println("App: " + appName + " v" + version);
    System.out.println("Features: " + features);
  }
}
// Output: App: MyApplication v1.0.0
// Output: Features: [feature1, feature2]

// Validation
@ConfigurationProperties(prefix = "database")
@Validated
public class DatabaseProperties {

  @NotNull
  @Pattern(regexp = "jdbc:.*")
  private String url;

  @NotBlank
  private String username;

  @NotBlank
  private String password;

  @Min(1)
  @Max(100)
  private int maxConnections = 10;

  // Getters and setters
}
// Invalid configuration throws exception at startup`
        }
      ],
      description: 'Opinionated framework for building production-ready Spring applications with minimal configuration and embedded servers.'
    },
    {
      id: 'spring-core', x: 580, y: 140, width: 350, height: 160,
      icon: '💎', title: 'Spring Core (IoC/DI)', color: 'blue',
      details: [
        { name: 'Dependency Injection', explanation: 'Constructor, setter, and field injection patterns. @Autowired, @Inject annotations. Constructor injection recommended for immutability. Automatic dependency resolution by type. Qualifier annotations for disambiguation.' },
        { name: 'Bean Lifecycle', explanation: 'Container manages bean instantiation, initialization, and destruction. @PostConstruct and @PreDestroy lifecycle callbacks. InitializingBean and DisposableBean interfaces. Custom init-method and destroy-method. Full lifecycle control.' },
        { name: 'Component Scanning', explanation: '@Component, @Service, @Repository, @Controller stereotypes. Automatic bean discovery in specified packages. @ComponentScan configuration. Filtering and custom annotations. Reduces XML configuration to zero.' },
        { name: 'Bean Scopes', explanation: 'Singleton (default), Prototype, Request, Session, Application scopes. @Scope annotation for custom scopes. Singleton for stateless beans. Prototype for stateful or per-use beans. Web-aware scopes for MVC applications.' },
        { name: 'Profiles', explanation: '@Profile annotation for environment-specific beans. Activate profiles via properties or command line. Dev, test, prod configurations. Multiple active profiles simultaneously. Conditional bean registration based on environment.' },
        { name: 'SpEL (Expression Language)', explanation: 'Spring Expression Language for runtime bean wiring. #{...} syntax for expressions. Property resolution, method invocation, collection manipulation. Bean reference expressions. Dynamic configuration and conditional logic.' }
      ],
      description: 'Inversion of Control container providing dependency injection, bean lifecycle management, and component scanning.'
    },
    {
      id: 'spring-mvc', x: 580, y: 340, width: 350, height: 160,
      icon: '🌐', title: 'Spring MVC / WebFlux', color: 'purple',
      details: [
        { name: 'MVC Controllers', explanation: '@RestController and @Controller for web endpoints. @RequestMapping, @GetMapping, @PostMapping annotations. Path variables and request parameters. Content negotiation and view resolution. RESTful API design with proper HTTP methods.' },
        { name: 'Request/Response Handling', explanation: '@RequestBody and @ResponseBody for JSON/XML. HttpEntity and ResponseEntity for full HTTP control. @PathVariable, @RequestParam, @RequestHeader annotations. Automatic type conversion and validation. Exception handling with @ExceptionHandler.' },
        { name: 'Validation', explanation: 'JSR-303/JSR-380 Bean Validation integration. @Valid and @Validated annotations. Custom validators and constraints. BindingResult for error handling. Field-level and class-level validation. Error message customization.' },
        { name: 'WebFlux Reactive', explanation: 'Non-blocking reactive web framework. Mono and Flux reactive types. Functional endpoint routing. Server-Sent Events and WebSocket support. Netty and Reactor integration. High-concurrency non-blocking I/O.' },
        { name: 'Interceptors', explanation: 'HandlerInterceptor for pre/post processing. WebMvcConfigurer for registration. Request logging, authentication, performance monitoring. Ordered execution chain. Access to ModelAndView for view manipulation.' },
        { name: 'Content Negotiation', explanation: 'Automatic content type handling based on Accept header. JSON, XML, HTML responses. @Produces and @Consumes annotations. Custom message converters. Multiple representation support for same endpoint.' }
      ],
      description: 'Web MVC framework for building RESTful APIs and web applications with reactive programming support via WebFlux.'
    },
    {
      id: 'spring-data', x: 80, y: 440, width: 350, height: 160,
      icon: '🗄️', title: 'Spring Data', color: 'orange',
      details: [
        { name: 'JPA Repositories', explanation: 'JpaRepository interface with CRUD operations. No implementation code needed. Query derivation from method names: findByNameAndAge. @Query annotation for custom JPQL/SQL. Pagination and sorting built-in.' },
        { name: 'Query Methods', explanation: 'Derived query methods from method names. findBy, countBy, deleteBy conventions. Complex queries with And, Or, Between, LessThan, GreaterThan. Named parameters with @Param. Native queries for database-specific features.' },
        { name: 'Auditing', explanation: '@CreatedDate, @LastModifiedDate, @CreatedBy, @LastModifiedBy annotations. Automatic timestamp and user tracking. AuditorAware for user resolution. Entity version tracking with @Version. Complete audit trail without code.' },
        { name: 'Specifications', explanation: 'JPA Criteria API abstraction for dynamic queries. Specification interface for reusable query fragments. Composable with and(), or(), not(). Type-safe query construction. Complex search functionality without string concatenation.' },
        { name: 'Projections', explanation: 'Interface-based and class-based projections. Select only needed fields for performance. DTO projections with constructor expressions. Dynamic projections with SpEL. Closed vs open projections for flexibility vs type safety.' },
        { name: 'Multi-Store Support', explanation: 'Unified API across JPA, MongoDB, Redis, Cassandra, Elasticsearch. Consistent repository pattern regardless of database. Mix different databases in single application. Cross-store support for polyglot persistence.' }
      ],
      description: 'Data access abstraction providing repository pattern, query derivation, and unified API across data stores.'
    },
    {
      id: 'spring-security', x: 580, y: 540, width: 350, height: 160,
      icon: '🔒', title: 'Spring Security', color: 'red',
      details: [
        { name: 'Authentication', explanation: 'Username/password, OAuth2, JWT, LDAP, database authentication. AuthenticationManager and AuthenticationProvider. Multiple authentication mechanisms simultaneously. @PreAuthorize, @Secured annotations. Custom authentication logic integration.' },
        { name: 'Authorization', explanation: 'Role-based and permission-based access control. Method security with @Secured, @PreAuthorize, @PostAuthorize. URL pattern security configuration. Expression-based access control with SpEL. Hierarchical roles support.' },
        { name: 'OAuth2 & JWT', explanation: 'Resource server and authorization server support. JWT token validation and creation. OAuth2 client for social login. OIDC (OpenID Connect) integration. Spring Security OAuth2 Resource Server. Token introspection and validation.' },
        { name: 'CSRF Protection', explanation: 'Cross-Site Request Forgery protection enabled by default. Synchronizer token pattern. Cookie-based CSRF tokens. Configurable for REST APIs. Token repository customization.' },
        { name: 'Password Encoding', explanation: 'BCrypt, SCrypt, Pbkdf2, Argon2 password encoders. DelegatingPasswordEncoder for algorithm migration. Automatic salt generation. Strength configuration. Industry-standard password hashing.' },
        { name: 'Security Filters', explanation: 'Filter chain for request processing. Authentication, authorization, CSRF, CORS filters. Custom filter insertion. SecurityFilterChain configuration. OncePerRequestFilter for custom logic.' }
      ],
      description: 'Comprehensive security framework for authentication, authorization, OAuth2, JWT, and protection against common attacks.'
    },
    {
      id: 'spring-cloud', x: 1080, y: 240, width: 350, height: 160,
      icon: '☁️', title: 'Spring Cloud', color: 'teal',
      details: [
        { name: 'Service Discovery', explanation: 'Eureka, Consul, Zookeeper integration. @EnableEurekaClient and @EnableDiscoveryClient. Automatic service registration and discovery. Load balancing with Ribbon. Client-side service discovery pattern.' },
        { name: 'Config Server', explanation: 'Centralized external configuration. Git, SVN, file system backends. Environment-specific configurations. Automatic refresh without restart. Encryption and decryption support. @RefreshScope for dynamic updates.' },
        { name: 'API Gateway', explanation: 'Spring Cloud Gateway for routing and filtering. Rate limiting, circuit breakers, retry logic. Path rewriting and request/response modification. WebFlux-based for reactive non-blocking. LoadBalancerClient integration.' },
        { name: 'Circuit Breaker', explanation: 'Resilience4j integration (replaced Hystrix). @CircuitBreaker annotation. Fallback methods for failures. Bulkhead, RateLimiter, Retry, TimeLimiter patterns. Real-time metrics and health indicators.' },
        { name: 'Distributed Tracing', explanation: 'Spring Cloud Sleuth for trace IDs. Zipkin and Jaeger integration. Automatic propagation across services. Baggage for contextual information. Correlation IDs in logs. End-to-end request tracking.' },
        { name: 'Load Balancing', explanation: 'Client-side load balancing with LoadBalancer. Ribbon successor with reactive support. Round-robin, random, weighted strategies. Health-aware load balancing. Service instance selection customization.' }
      ],
      description: 'Microservices patterns including service discovery, config management, API gateway, and distributed tracing.'
    },
    {
      id: 'spring-aop', x: 1080, y: 440, width: 350, height: 160,
      icon: '🎯', title: 'Spring AOP', color: 'indigo',
      details: [
        { name: 'Aspect-Oriented Programming', explanation: 'Cross-cutting concerns separation. @Aspect annotation for aspect classes. Declarative approach to common concerns. Proxy-based AOP for Spring beans. AspectJ integration for compile-time weaving.' },
        { name: 'Advice Types', explanation: '@Before, @After, @AfterReturning, @AfterThrowing, @Around advices. Execution interception at various join points. Access to method arguments and return values. Exception handling in aspects. Around advice for complete control.' },
        { name: 'Pointcuts', explanation: 'Expression language for join point matching. Execution, within, target, args pointcut designators. Logical operators (&&, ||, !) for combination. Reusable @Pointcut declarations. Type-safe pointcut composition.' },
        { name: 'Common Use Cases', explanation: 'Logging, transaction management, security, caching, performance monitoring. Audit trails without business logic pollution. Consistent error handling. Metrics collection. Declarative retry logic.' },
        { name: 'Transaction Management', explanation: '@Transactional annotation for declarative transactions. Propagation and isolation levels. Rollback rules and read-only optimization. Multiple transaction managers. Programmatic transaction control with TransactionTemplate.' },
        { name: 'Caching', explanation: '@Cacheable, @CachePut, @CacheEvict annotations. Cache abstraction over EhCache, Caffeine, Redis. SpEL for dynamic cache keys. Conditional caching. Cache synchronization and TTL configuration.' }
      ],
      description: 'Aspect-Oriented Programming for cross-cutting concerns like logging, transactions, caching, and security.'
    },
    {
      id: 'spring-batch', x: 1080, y: 640, width: 350, height: 140,
      icon: '⚙️', title: 'Spring Batch & Integration', color: 'pink',
      details: [
        { name: 'Batch Processing', explanation: 'Job, Step, ItemReader, ItemProcessor, ItemWriter abstractions. Chunk-oriented and tasklet-based processing. Restart, skip, retry policies. Parallel and partitioned steps. Job parameters and scheduling. JobRepository for metadata.' },
        { name: 'Spring Integration', explanation: 'Enterprise Integration Patterns implementation. Message channels, endpoints, routers, transformers. File, HTTP, JMS, JDBC adapters. Asynchronous messaging. Polling and event-driven consumers. DSL for flow definition.' },
        { name: 'Scheduling', explanation: '@Scheduled annotation for periodic tasks. Cron, fixed-rate, fixed-delay expressions. @EnableScheduling configuration. TaskScheduler abstraction. Async task execution with @Async. Thread pool configuration.' },
        { name: 'Event Handling', explanation: '@EventListener for application events. Asynchronous event processing. Conditional event listening with SpEL. Custom event types. Order of event listeners. Transaction-bound events.' }
      ],
      description: 'Batch processing framework and enterprise integration patterns for large-scale data processing and system integration.'
    }
  ]

  const handleComponentClick = (component) => {
    setSelectedComponent(component)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedComponent(null)
    setSelectedConcept(null)
  }

  const handleConceptClick = (concept) => {
    setSelectedConcept(concept)
  }

  return (
    <div style={{
      padding: '2rem',
      maxWidth: '95%',
      margin: '120px auto 0',
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 20px 40px -10px rgba(0, 0, 0, 0.15)',
      border: '3px solid rgba(16, 185, 129, 0.4)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '2rem'
      }}>
        <button
          onClick={onBack}
          style={{
            padding: '0.75rem 1.5rem',
            fontSize: '1rem',
            fontWeight: '600',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            transition: 'all 0.2s ease'
          }}
        >
          ← Back to Menu
        </button>
        <h1 style={{
          fontSize: '2.5rem',
          fontWeight: '800',
          color: '#1f2937',
          margin: 0,
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
        }}>
          🌱 Spring Framework Ecosystem
        </h1>
        <div style={{ width: '120px' }}></div>
      </div>

      <div style={{
        backgroundColor: 'rgba(16, 185, 129, 0.05)',
        padding: '2.5rem 10rem',
        borderRadius: '16px',
        border: '3px solid rgba(16, 185, 129, 0.3)',
        marginBottom: '2rem'
      }}>
        <p style={{
          fontSize: '1.3rem',
          color: '#374151',
          fontWeight: '500',
          margin: 0,
          lineHeight: '1.8',
          textAlign: 'center'
        }}>
          Comprehensive Spring ecosystem covering Spring Boot for rapid development, Spring Core for dependency injection,
          Spring MVC/WebFlux for web applications, Spring Data for data access, Spring Security for authentication,
          Spring Cloud for microservices, and Spring AOP for cross-cutting concerns.
        </p>
      </div>

      <ModernDiagram
        components={components}
        onComponentClick={handleComponentClick}
        title="Spring Framework Architecture"
        width={1400}
        height={800}
        containerWidth={1800}
      />

      {/* Modal */}
      {isModalOpen && selectedComponent && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2.5rem',
            borderRadius: '16px',
            maxWidth: '1400px',
            width: '95%',
            maxHeight: '85vh',
            overflowY: 'auto',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)',
            border: '3px solid rgba(16, 185, 129, 0.4)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '2rem'
            }}>
              <h2 style={{
                fontSize: '2rem',
                fontWeight: '800',
                color: '#1f2937',
                margin: 0,
                fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
              }}>
                {selectedComponent.icon} {selectedComponent.title}
              </h2>
              <button
                onClick={closeModal}
                style={{
                  padding: '0.5rem 1rem',
                  fontSize: '1.25rem',
                  fontWeight: '600',
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
              >
                ✕
              </button>
            </div>

            <div style={{
              backgroundColor: 'rgba(16, 185, 129, 0.05)',
              padding: '1.5rem',
              borderRadius: '12px',
              border: '2px solid rgba(16, 185, 129, 0.2)',
              marginBottom: '2rem'
            }}>
              <p style={{
                fontSize: '1.1rem',
                color: '#374151',
                fontWeight: '500',
                margin: 0,
                lineHeight: '1.6'
              }}>
                {selectedComponent.description}
              </p>
            </div>

            <div style={{
              display: 'grid',
              gridTemplateColumns: selectedConcept ? '1fr 1fr' : '1fr',
              gap: '2rem'
            }}>
              <div>
                <h3 style={{
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  color: '#1f2937',
                  marginBottom: '1rem'
                }}>
                  Key Features
                </h3>
                <div style={{
                  display: 'grid',
                  gap: '0.75rem'
                }}>
                  {selectedComponent.details.map((detail, idx) => (
                    <div
                      key={idx}
                      onClick={() => handleConceptClick(detail)}
                      style={{
                        backgroundColor: selectedConcept?.name === detail.name
                          ? 'rgba(16, 185, 129, 0.15)'
                          : 'rgba(16, 185, 129, 0.1)',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: selectedConcept?.name === detail.name
                          ? '2px solid rgba(16, 185, 129, 0.4)'
                          : '2px solid rgba(16, 185, 129, 0.2)',
                        fontSize: '0.95rem',
                        fontWeight: '500',
                        color: selectedConcept?.name === detail.name
                          ? '#059669'
                          : '#047857',
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        transform: 'scale(1)'
                      }}
                      onMouseEnter={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(16, 185, 129, 0.15)'
                          e.target.style.transform = 'scale(1.02)'
                          e.target.style.borderColor = 'rgba(16, 185, 129, 0.4)'
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(16, 185, 129, 0.1)'
                          e.target.style.transform = 'scale(1)'
                          e.target.style.borderColor = 'rgba(16, 185, 129, 0.2)'
                        }
                      }}
                    >
                      • {detail.name}
                      {selectedConcept?.name === detail.name && (
                        <span style={{
                          fontSize: '0.8rem',
                          opacity: 0.8,
                          marginLeft: '0.5rem',
                          fontWeight: '600'
                        }}>
                          ← Selected
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {selectedConcept && (
                <div>
                  <h3 style={{
                    fontSize: '1.25rem',
                    fontWeight: '700',
                    color: '#1f2937',
                    marginBottom: '1rem'
                  }}>
                    {selectedConcept.name}
                  </h3>

                  <div style={{
                    backgroundColor: 'rgba(16, 185, 129, 0.05)',
                    padding: '1.5rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(16, 185, 129, 0.2)',
                    marginBottom: '1.5rem'
                  }}>
                    <p style={{
                      fontSize: '1rem',
                      color: '#374151',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.7',
                      textAlign: 'justify'
                    }}>
                      {selectedConcept.explanation}
                    </p>
                  </div>

                  {selectedConcept.codeExample && (
                    <div style={{
                      backgroundColor: '#1e293b',
                      padding: '1.5rem',
                      borderRadius: '12px',
                      border: '2px solid #334155',
                      marginBottom: '1.5rem'
                    }}>
                      <h4 style={{
                        fontSize: '1rem',
                        fontWeight: '700',
                        color: '#60a5fa',
                        margin: '0 0 1rem 0'
                      }}>
                        💻 Code Example
                      </h4>
                      <SyntaxHighlighter code={selectedConcept.codeExample} />
                    </div>
                  )}

                  <div style={{
                    backgroundColor: 'rgba(59, 130, 246, 0.05)',
                    padding: '1.25rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(59, 130, 246, 0.2)'
                  }}>
                    <h4 style={{
                      fontSize: '1rem',
                      fontWeight: '700',
                      color: '#1e40af',
                      margin: '0 0 0.75rem 0'
                    }}>
                      💡 Key Takeaway
                    </h4>
                    <p style={{
                      fontSize: '0.9rem',
                      color: '#1e40af',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.5',
                      fontStyle: 'italic'
                    }}>
                      {selectedConcept.name} is a powerful Spring feature that enables enterprise-grade Java applications with robust, scalable, and maintainable architecture patterns.
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

    </div>
  )
}

export default Spring