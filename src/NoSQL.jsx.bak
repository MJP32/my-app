import { useState } from 'react'

const ModernDiagram = ({ components, onComponentClick, title, width = 1400, height = 800, containerWidth = 1800 }) => {
  const [hoveredComponent, setHoveredComponent] = useState(null)

  return (
    <div style={{
      width: '100%',
      maxWidth: `${containerWidth}px`,
      margin: '0 auto',
      backgroundColor: '#f8fafc',
      borderRadius: '16px',
      padding: '2rem',
      boxShadow: '0 10px 30px -5px rgba(0, 0, 0, 0.1)',
      border: '2px solid #e2e8f0'
    }}>
      <h3 style={{
        textAlign: 'center',
        marginBottom: '2rem',
        fontSize: '1.75rem',
        fontWeight: '800',
        color: '#1e293b',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }}>
        {title}
      </h3>

      <svg width="100%" height={height} viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>
        <defs>
          <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#3b82f6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#1e40af" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="greenGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#10b981" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#059669" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#7c3aed" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ef4444" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#dc2626" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="orangeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#f59e0b" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#d97706" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="tealGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#14b8a6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#0d9488" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="indigoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#6366f1" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#4f46e5" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="pinkGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ec4899" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#db2777" stopOpacity="0.9"/>
          </linearGradient>
        </defs>

        {/* Connecting lines */}
        <g stroke="#64748b" strokeWidth="4" strokeOpacity="0.7" fill="none">
          <line x1="200" y1="300" x2="600" y2="200" strokeDasharray="10,5"/>
          <line x1="200" y1="300" x2="600" y2="400" strokeDasharray="10,5"/>
          <line x1="800" y1="200" x2="1200" y2="300" strokeDasharray="10,5"/>
          <line x1="600" y1="400" x2="1000" y2="300" strokeDasharray="10,5"/>
          <line x1="200" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
          <line x1="800" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
        </g>

        {/* Component rectangles */}
        {components.map((component) => (
          <g key={component.id}>
            <rect
              x={component.x}
              y={component.y}
              width={component.width}
              height={component.height}
              rx="12"
              ry="12"
              fill={`url(#${component.color}Gradient)`}
              stroke={hoveredComponent === component.id ? '#1e293b' : '#64748b'}
              strokeWidth={hoveredComponent === component.id ? '4' : '2'}
              style={{
                cursor: 'pointer',
                filter: hoveredComponent === component.id ? 'drop-shadow(0 8px 16px rgba(0,0,0,0.2))' : 'drop-shadow(0 4px 8px rgba(0,0,0,0.1))',
                transform: hoveredComponent === component.id ? 'scale(1.02)' : 'scale(1)',
                transformOrigin: `${component.x + component.width/2}px ${component.y + component.height/2}px`,
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={() => setHoveredComponent(component.id)}
              onMouseLeave={() => setHoveredComponent(null)}
              onClick={() => onComponentClick && onComponentClick(component)}
            />

            {/* Icon */}
            <text
              x={component.x + component.width/2}
              y={component.y + 35}
              textAnchor="middle"
              fontSize="48"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.icon}
            </text>

            {/* Title */}
            <text
              x={component.x + component.width/2}
              y={component.y + 75}
              textAnchor="middle"
              fontSize="18"
              fontWeight="700"
              fill="white"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.title}
            </text>

            {/* Details */}
            {component.details && component.details.slice(0, 3).map((detail, idx) => (
              <text
                key={idx}
                x={component.x + component.width/2}
                y={component.y + 100 + (idx * 15)}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.9)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                {detail.name.length > 18 ? detail.name.substring(0, 15) + '...' : detail.name}
              </text>
            ))}
            {component.details && component.details.length > 3 && (
              <text
                x={component.x + component.width/2}
                y={component.y + 145}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.7)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                +{component.details.length - 3} more features...
              </text>
            )}
          </g>
        ))}
      </svg>
    </div>
  )
}

function NoSQL({ onBack }) {
  const [selectedComponent, setSelectedComponent] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedConcept, setSelectedConcept] = useState(null)

  const components = [
    {
      id: 'mongodb', x: 80, y: 240, width: 350, height: 160,
      icon: 'üçÉ', title: 'MongoDB', color: 'purple',
      details: [
        { name: 'Document Database', explanation: 'MongoDB stores data as flexible JSON-like BSON documents. Schema-less design allows dynamic fields per document. Perfect for evolving data structures. Documents can contain nested arrays and objects for hierarchical data. Natural mapping to programming language objects.' },
        { name: 'Aggregation Framework', explanation: 'Powerful pipeline-based data processing with stages like $match, $group, $project, $sort, $lookup. Perform complex transformations and analytics directly in the database. MapReduce alternative with better performance. Support for joins via $lookup stage.' },
        { name: 'Indexing Strategies', explanation: 'Support for single field, compound, multikey, text, geospatial, and hashed indexes. Index intersection for multiple indexes in queries. Partial indexes for subset of documents. Covered queries serve entirely from index. Critical for query performance.' },
        { name: 'Replication', explanation: 'Replica sets provide high availability with automatic failover. Primary handles writes, secondaries replicate data. Automatic election of new primary on failure. Read preference options for distributing load. Ensures data durability and availability.' },
        { name: 'Sharding', explanation: 'Horizontal scaling through data distribution across shards. Shard key determines data distribution. Range-based or hash-based sharding strategies. Automatic balancing of data. Handles massive datasets and high throughput.' },
        { name: 'ACID Transactions', explanation: 'Multi-document ACID transactions since MongoDB 4.0. Snapshot isolation level. Transactions across shards and replica sets. Provides consistency guarantees when needed. Balance between NoSQL flexibility and SQL guarantees.' }
      ],
      description: 'Leading document database with flexible schema, powerful aggregation, and horizontal scaling through sharding.'
    },
    {
      id: 'cassandra', x: 580, y: 140, width: 350, height: 160,
      icon: 'üíé', title: 'Apache Cassandra', color: 'purple',
      details: [
        { name: 'Column-Family Store', explanation: 'Wide-column store organizing data into column families. Rows can have varying columns. Optimized for write-heavy workloads. Columns grouped by access patterns. Inspired by Google Bigtable design.' },
        { name: 'Ring Architecture', explanation: 'Peer-to-peer distributed system with no single point of failure. Data distributed via consistent hashing across ring. Every node is identical in responsibilities. Gossip protocol for cluster communication. Linear scalability.' },
        { name: 'Tunable Consistency', explanation: 'Configurable consistency levels from ONE to ALL. Quorum reads/writes balance consistency and availability. Choose per-operation consistency. CAP theorem trade-offs controlled by application. Eventual consistency by default.' },
        { name: 'Partition Keys', explanation: 'Partition key determines data distribution across nodes. Clustering keys define sort order within partition. Proper key design critical for performance. Avoid hot partitions. Data modeling driven by query patterns.' },
        { name: 'Write-Optimized', explanation: 'Sequential write path using commit log and memtables. No read-before-write operations. Updates are inserts with timestamps. Compaction merges data files. Exceptionally high write throughput.' },
        { name: 'Multi-DC Replication', explanation: 'Built-in support for multiple data centers. Network topology awareness. Configurable replication per DC. Local and remote consistency levels. Disaster recovery and geographic distribution.' }
      ],
      description: 'Highly scalable column-family database with masterless architecture, tunable consistency, and exceptional write performance.'
    },
    {
      id: 'redis', x: 580, y: 340, width: 350, height: 160,
      icon: 'üî¥', title: 'Redis', color: 'purple',
      details: [
        { name: 'In-Memory Store', explanation: 'All data kept in RAM for microsecond latency. Optional persistence to disk via snapshots or AOF. Dramatically faster than disk-based databases. Perfect for caching, sessions, and real-time applications. Memory as primary storage medium.' },
        { name: 'Data Structures', explanation: 'Native support for strings, hashes, lists, sets, sorted sets, bitmaps, hyperloglogs, streams. Operations optimized for each type. Atomic operations on complex types. Enables sophisticated caching and data modeling patterns.' },
        { name: 'Pub/Sub Messaging', explanation: 'Built-in publish/subscribe messaging pattern. Channels for topic-based messaging. Pattern matching subscriptions. Real-time event distribution. Foundation for message queues and notifications.' },
        { name: 'Transactions', explanation: 'MULTI/EXEC for transaction blocks. All commands executed atomically. WATCH for optimistic locking. Pipeline commands for better performance. Lua scripting for server-side atomic operations.' },
        { name: 'Persistence Options', explanation: 'RDB snapshots for point-in-time backups. AOF (Append Only File) logs every write operation. Hybrid mode combining both. Trade-off between performance and durability. Configurable fsync policies.' },
        { name: 'Clustering & Sentinel', explanation: 'Redis Cluster for automatic sharding across nodes. Hash slots for data distribution. Redis Sentinel for high availability and monitoring. Automatic failover. Master-replica replication.' }
      ],
      description: 'Ultra-fast in-memory data store supporting rich data structures, pub/sub, and multiple persistence strategies.'
    },
    {
      id: 'dynamodb', x: 80, y: 440, width: 350, height: 160,
      icon: '‚ö°', title: 'Amazon DynamoDB', color: 'purple',
      details: [
        { name: 'Managed Service', explanation: 'Fully managed by AWS - no servers to manage. Automatic scaling based on traffic. Built-in backup and restore. Point-in-time recovery. Multi-region replication. Focus on application, not database operations.' },
        { name: 'Key-Value & Document', explanation: 'Supports both key-value and document data models. Store complex nested structures. Flexible schema per item. Primary key required (partition key or partition + sort key). Items up to 400 KB.' },
        { name: 'Provisioned & On-Demand', explanation: 'Provisioned capacity mode with predictable performance. On-demand mode for variable workloads. Pay per request in on-demand. Auto-scaling for provisioned capacity. Switch between modes as needed.' },
        { name: 'Global Tables', explanation: 'Multi-region, multi-master replication. Active-active configuration across regions. Automatic conflict resolution. Single-digit millisecond latency globally. Disaster recovery and geographic distribution.' },
        { name: 'DynamoDB Streams', explanation: 'Change data capture streams for real-time processing. Time-ordered sequence of item modifications. Lambda triggers for serverless processing. Enable event-driven architectures. Maintain derived data stores.' },
        { name: 'Indexes', explanation: 'Global Secondary Indexes (GSI) for alternate query patterns. Local Secondary Indexes (LSI) for same partition key. Project specific attributes. Eventually consistent GSIs. Query flexibility beyond primary key.' }
      ],
      description: 'Fully managed, serverless NoSQL database with single-digit millisecond performance and automatic scaling.'
    },
    {
      id: 'document-stores', x: 580, y: 540, width: 350, height: 160,
      icon: 'üìÑ', title: 'Document Stores', color: 'purple',
      details: [
        { name: 'Schema Flexibility', explanation: 'Documents can have different fields and structures. No predefined schema required. Add/remove fields without migrations. Perfect for evolving requirements. Natural representation of object-oriented data.' },
        { name: 'Nested Structures', explanation: 'Support for embedded documents and arrays. Hierarchical data modeling. Denormalization for query performance. Reduce joins by embedding related data. Single document reads instead of multiple queries.' },
        { name: 'Query Languages', explanation: 'Rich query capabilities beyond key lookups. Filter by nested field values. Projection to return specific fields. Sorting and pagination. Aggregation and analytics. Index-backed queries for performance.' },
        { name: 'ACID Properties', explanation: 'Atomic operations on single documents. Modern document databases support multi-document transactions. Isolation levels for consistency. Durability guarantees. Balance between NoSQL flexibility and ACID guarantees.' },
        { name: 'Use Cases', explanation: 'Content management systems, user profiles, product catalogs, real-time analytics. Mobile app backends. IoT data. Flexible data models. Rapid development and iteration.' }
      ],
      description: 'Database paradigm storing data as self-contained documents, typically JSON/BSON, with flexible schemas.'
    },
    {
      id: 'key-value-stores', x: 1080, y: 240, width: 350, height: 160,
      icon: 'üîë', title: 'Key-Value Stores', color: 'purple',
      details: [
        { name: 'Simple Model', explanation: 'Simplest NoSQL model - unique key maps to value. Value is opaque to database. No query language needed. PUT, GET, DELETE operations. Blazing fast lookups. Foundation for other NoSQL types.' },
        { name: 'Performance', explanation: 'Optimized for extremely high throughput and low latency. Direct hash-based lookup. No query parsing overhead. In-memory implementations for microsecond response times. Linear scalability.' },
        { name: 'Caching Layer', explanation: 'Primary use case as cache in front of databases. Store session data, user preferences, temporary data. TTL (time-to-live) for automatic expiration. Cache-aside, read-through, write-through patterns.' },
        { name: 'Distributed Hash Tables', explanation: 'Consistent hashing for data distribution. Minimal data movement when adding/removing nodes. Replication for high availability. Eventually consistent. Amazon Dynamo paper principles.' },
        { name: 'Use Cases', explanation: 'Session management, user profiles, shopping carts, real-time recommendations. Leaderboards. Rate limiting. Any scenario with primary key access pattern. No complex queries needed.' }
      ],
      description: 'Simplest NoSQL model mapping unique keys to values, optimized for high-performance lookups and caching.'
    },
    {
      id: 'column-family', x: 1080, y: 440, width: 350, height: 160,
      icon: 'üìä', title: 'Column-Family Databases', color: 'purple',
      details: [
        { name: 'Wide-Column Model', explanation: 'Tables with rows and dynamic columns. Columns grouped into column families. Each row can have different columns. Sparse data representation. Two-dimensional key-value store (row key, column key).' },
        { name: 'Data Locality', explanation: 'Columns accessed together stored together physically. Column family design based on query patterns. Reduces I/O for analytical queries. Compression works better on similar data types. Columnar storage benefits.' },
        { name: 'Versioning', explanation: 'Multiple versions of cell values with timestamps. Time-travel queries. Retrieve historical data. Automatic garbage collection of old versions. Audit trails and temporal data.' },
        { name: 'Compression', explanation: 'Columnar layout enables efficient compression. Similar values compress well. Reduce storage costs. Lower I/O requirements. Multiple compression algorithms per column family.' },
        { name: 'Analytics Workloads', explanation: 'Optimized for analytical queries scanning columns. Aggregations across large datasets. Time-series data. Data warehousing. IoT sensor data. Log aggregation and analysis.' },
        { name: 'Examples', explanation: 'Apache Cassandra, HBase, ScyllaDB. Google Bigtable (inspiration). Write-heavy workloads. Petabyte-scale deployments. Masterless or master-based architectures.' }
      ],
      description: 'Databases organizing data by column families, optimized for write-heavy workloads and analytical queries.'
    },
    {
      id: 'graph-databases', x: 1080, y: 640, width: 350, height: 140,
      icon: 'üï∏Ô∏è', title: 'Graph Databases', color: 'purple',
      details: [
        { name: 'Nodes & Relationships', explanation: 'Store data as nodes (entities) and edges (relationships). Relationships are first-class citizens. Properties on both nodes and edges. Labeled for typing. Natural representation of connected data.' },
        { name: 'Traversal Queries', explanation: 'Query by traversing relationships. Find paths between nodes. Shortest path algorithms. Depth and breadth-first traversal. Pattern matching. Much faster than joins for connected data.' },
        { name: 'Query Languages', explanation: 'Cypher (Neo4j), Gremlin (TinkerPop), SPARQL (RDF). Declarative pattern matching. ASCII-art syntax in Cypher. Optimized for graph operations. Much more intuitive than SQL joins.' },
        { name: 'Use Cases', explanation: 'Social networks, recommendation engines, fraud detection, knowledge graphs. Network and IT operations. Master data management. Identity and access management. Anything with complex relationships.' },
        { name: 'Performance', explanation: 'Constant time traversals regardless of database size. Index-free adjacency. Relationships stored with nodes. Dramatically faster than joins for multi-hop queries. Real-time recommendations possible.' }
      ],
      description: 'Specialized databases for highly connected data using nodes, relationships, and graph traversal queries.'
    }
  ]

  const handleComponentClick = (component) => {
    setSelectedComponent(component)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedComponent(null)
    setSelectedConcept(null)
  }

  const handleConceptClick = (concept) => {
    setSelectedConcept(concept)
  }

  return (
    <div style={{
      padding: '2rem',
      maxWidth: '95%',
      margin: '120px auto 0',
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 20px 40px -10px rgba(0, 0, 0, 0.15)',
      border: '3px solid rgba(139, 92, 246, 0.4)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '2rem'
      }}>
        <button
          onClick={onBack}
          style={{
            padding: '0.75rem 1.5rem',
            fontSize: '1rem',
            fontWeight: '600',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            transition: 'all 0.2s ease'
          }}
        >
          ‚Üê Back to Menu
        </button>
        <h1 style={{
          fontSize: '2.5rem',
          fontWeight: '800',
          color: '#1f2937',
          margin: 0,
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
        }}>
          NoSQL Databases
        </h1>
        <div style={{ width: '120px' }}></div>
      </div>

      <div style={{
        backgroundColor: 'rgba(139, 92, 246, 0.05)',
        padding: '2.5rem 10rem',
        borderRadius: '16px',
        border: '3px solid rgba(139, 92, 246, 0.3)',
        marginBottom: '2rem'
      }}>
        <p style={{
          fontSize: '1.3rem',
          color: '#374151',
          fontWeight: '500',
          margin: 0,
          lineHeight: '1.8',
          textAlign: 'center'
        }}>
          NoSQL Databases: Modern data storage solutions including MongoDB document store, Cassandra column-family,
          Redis in-memory cache, DynamoDB managed service, graph databases, and key-value stores.
          Scalable, flexible alternatives to traditional relational databases.
        </p>
      </div>

      <ModernDiagram
        components={components}
        onComponentClick={handleComponentClick}
        title="NoSQL Database Technologies"
        width={1400}
        height={800}
        containerWidth={1800}
      />

      {/* Modal */}
      {isModalOpen && selectedComponent && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2.5rem',
            borderRadius: '16px',
            maxWidth: '1400px',
            width: '95%',
            maxHeight: '85vh',
            overflowY: 'auto',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)',
            border: '3px solid rgba(139, 92, 246, 0.4)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '2rem'
            }}>
              <h2 style={{
                fontSize: '2rem',
                fontWeight: '800',
                color: '#1f2937',
                margin: 0,
                fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
              }}>
                {selectedComponent.icon} {selectedComponent.title}
              </h2>
              <button
                onClick={closeModal}
                style={{
                  padding: '0.5rem 1rem',
                  fontSize: '1.25rem',
                  fontWeight: '600',
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
              >
                ‚úï
              </button>
            </div>

            <div style={{
              backgroundColor: 'rgba(139, 92, 246, 0.05)',
              padding: '1.5rem',
              borderRadius: '12px',
              border: '2px solid rgba(139, 92, 246, 0.2)',
              marginBottom: '2rem'
            }}>
              <p style={{
                fontSize: '1.1rem',
                color: '#374151',
                fontWeight: '500',
                margin: 0,
                lineHeight: '1.6'
              }}>
                {selectedComponent.description}
              </p>
            </div>

            <div style={{
              display: 'grid',
              gridTemplateColumns: selectedConcept ? '1fr 1fr' : '1fr',
              gap: '2rem'
            }}>
              <div>
                <h3 style={{
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  color: '#1f2937',
                  marginBottom: '1rem'
                }}>
                  Key Features
                </h3>
                <div style={{
                  display: 'grid',
                  gap: '0.75rem'
                }}>
                  {selectedComponent.details.map((detail, idx) => (
                    <div
                      key={idx}
                      onClick={() => handleConceptClick(detail)}
                      style={{
                        backgroundColor: selectedConcept?.name === detail.name
                          ? 'rgba(139, 92, 246, 0.15)'
                          : 'rgba(139, 92, 246, 0.1)',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: selectedConcept?.name === detail.name
                          ? '2px solid rgba(139, 92, 246, 0.4)'
                          : '2px solid rgba(139, 92, 246, 0.2)',
                        fontSize: '0.95rem',
                        fontWeight: '500',
                        color: selectedConcept?.name === detail.name
                          ? '#7c3aed'
                          : '#6b21a8',
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        transform: 'scale(1)'
                      }}
                      onMouseEnter={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(139, 92, 246, 0.15)'
                          e.target.style.transform = 'scale(1.02)'
                          e.target.style.borderColor = 'rgba(139, 92, 246, 0.4)'
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(139, 92, 246, 0.1)'
                          e.target.style.transform = 'scale(1)'
                          e.target.style.borderColor = 'rgba(139, 92, 246, 0.2)'
                        }
                      }}
                    >
                      ‚Ä¢ {detail.name}
                      {selectedConcept?.name === detail.name && (
                        <span style={{
                          fontSize: '0.8rem',
                          opacity: 0.8,
                          marginLeft: '0.5rem',
                          fontWeight: '600'
                        }}>
                          ‚Üê Selected
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {selectedConcept && (
                <div>
                  <h3 style={{
                    fontSize: '1.25rem',
                    fontWeight: '700',
                    color: '#1f2937',
                    marginBottom: '1rem'
                  }}>
                    {selectedConcept.name}
                  </h3>

                  <div style={{
                    backgroundColor: 'rgba(139, 92, 246, 0.05)',
                    padding: '1.5rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(139, 92, 246, 0.2)',
                    marginBottom: '1.5rem'
                  }}>
                    <p style={{
                      fontSize: '1rem',
                      color: '#374151',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.7',
                      textAlign: 'justify'
                    }}>
                      {selectedConcept.explanation}
                    </p>
                  </div>

                  <div style={{
                    backgroundColor: 'rgba(59, 130, 246, 0.05)',
                    padding: '1.25rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(59, 130, 246, 0.2)'
                  }}>
                    <h4 style={{
                      fontSize: '1rem',
                      fontWeight: '700',
                      color: '#1e40af',
                      margin: '0 0 0.75rem 0'
                    }}>
                      üí° Key Takeaway
                    </h4>
                    <p style={{
                      fontSize: '0.9rem',
                      color: '#1e40af',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.5',
                      fontStyle: 'italic'
                    }}>
                      {selectedConcept.name} is a fundamental NoSQL database concept that enables scalable, flexible data storage patterns for modern distributed applications.
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

    </div>
  )
}

export default NoSQL