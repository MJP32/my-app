import { useState } from 'react'

const ModernDiagram = ({ components, onComponentClick, title, width = 1400, height = 800, containerWidth = 1800 }) => {
  const [hoveredComponent, setHoveredComponent] = useState(null)

  return (
    <div style={{
      width: '100%',
      maxWidth: `${containerWidth}px`,
      margin: '0 auto',
      backgroundColor: '#f8fafc',
      borderRadius: '16px',
      padding: '2rem',
      boxShadow: '0 10px 30px -5px rgba(0, 0, 0, 0.1)',
      border: '2px solid #e2e8f0'
    }}>
      <h3 style={{
        textAlign: 'center',
        marginBottom: '2rem',
        fontSize: '1.75rem',
        fontWeight: '800',
        color: '#1e293b',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }}>
        {title}
      </h3>

      <svg width="100%" height={height} viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>
        <defs>
          <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#3b82f6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#1e40af" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="greenGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#10b981" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#059669" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#7c3aed" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ef4444" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#dc2626" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="orangeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#f59e0b" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#d97706" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="tealGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#14b8a6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#0d9488" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="indigoGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#6366f1" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#4f46e5" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="pinkGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ec4899" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#db2777" stopOpacity="0.9"/>
          </linearGradient>
        </defs>

        {/* Connecting lines */}
        <g stroke="#64748b" strokeWidth="4" strokeOpacity="0.7" fill="none">
          <line x1="200" y1="300" x2="600" y2="200" strokeDasharray="10,5"/>
          <line x1="200" y1="300" x2="600" y2="400" strokeDasharray="10,5"/>
          <line x1="800" y1="200" x2="1200" y2="300" strokeDasharray="10,5"/>
          <line x1="600" y1="400" x2="1000" y2="300" strokeDasharray="10,5"/>
          <line x1="200" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
          <line x1="800" y1="500" x2="600" y2="600" strokeDasharray="10,5"/>
        </g>

        {/* Component rectangles */}
        {components.map((component) => (
          <g key={component.id}>
            <rect
              x={component.x}
              y={component.y}
              width={component.width}
              height={component.height}
              rx="12"
              ry="12"
              fill={`url(#${component.color}Gradient)`}
              stroke={hoveredComponent === component.id ? '#1e293b' : '#64748b'}
              strokeWidth={hoveredComponent === component.id ? '4' : '2'}
              style={{
                cursor: 'pointer',
                filter: hoveredComponent === component.id ? 'drop-shadow(0 8px 16px rgba(0,0,0,0.2))' : 'drop-shadow(0 4px 8px rgba(0,0,0,0.1))',
                transform: hoveredComponent === component.id ? 'scale(1.02)' : 'scale(1)',
                transformOrigin: `${component.x + component.width/2}px ${component.y + component.height/2}px`,
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={() => setHoveredComponent(component.id)}
              onMouseLeave={() => setHoveredComponent(null)}
              onClick={() => onComponentClick && onComponentClick(component)}
            />

            {/* Icon */}
            <text
              x={component.x + component.width/2}
              y={component.y + 35}
              textAnchor="middle"
              fontSize="48"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.icon}
            </text>

            {/* Title */}
            <text
              x={component.x + component.width/2}
              y={component.y + 75}
              textAnchor="middle"
              fontSize="18"
              fontWeight="700"
              fill="white"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.title}
            </text>

            {/* Details */}
            {component.details && component.details.slice(0, 3).map((detail, idx) => (
              <text
                key={idx}
                x={component.x + component.width/2}
                y={component.y + 100 + (idx * 15)}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.9)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                {detail.name.length > 18 ? detail.name.substring(0, 15) + '...' : detail.name}
              </text>
            ))}
            {component.details && component.details.length > 3 && (
              <text
                x={component.x + component.width/2}
                y={component.y + 145}
                textAnchor="middle"
                fontSize="10"
                fontWeight="500"
                fill="rgba(255,255,255,0.7)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                +{component.details.length - 3} more features...
              </text>
            )}
          </g>
        ))}
      </svg>
    </div>
  )
}

function MicroservicePatterns({ onBack }) {
  const [selectedComponent, setSelectedComponent] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedConcept, setSelectedConcept] = useState(null)

  const components = [
    {
      id: 'api-gateway', x: 80, y: 240, width: 350, height: 160,
      icon: '🚪', title: 'API Gateway Pattern', color: 'indigo',
      details: [
        { name: 'Single Entry Point', explanation: 'Unified entry point for all clients. Routes requests to appropriate microservices. Simplifies client code. Reduces coupling between clients and services. Protocol translation. Client doesn\'t need to know service topology.' },
        { name: 'Request Routing', explanation: 'Routes based on URL, headers, method. Path-based routing: /users/* to user service. Load balancing across service instances. Version-based routing. A/B testing. Canary deployments. Dynamic routing rules.' },
        { name: 'Authentication & Authorization', explanation: 'Centralized security enforcement. JWT validation. OAuth2/OIDC integration. API key management. Rate limiting per client. Security policies. Single place for auth logic. Reduces duplication across services.' },
        { name: 'Request Aggregation', explanation: 'Combine multiple service calls into single response. Reduces client-side complexity. Parallel service invocation. Data composition. Backend for Frontend (BFF) pattern. Mobile-specific aggregations. Optimized for client needs.' },
        { name: 'Cross-Cutting Concerns', explanation: 'Logging, monitoring, metrics collection. Distributed tracing correlation IDs. Request/response transformation. Caching. Compression. SSL termination. Error handling. Protocol translation (REST to gRPC).' },
        { name: 'Technologies', explanation: 'Kong, NGINX, AWS API Gateway, Azure API Management, Spring Cloud Gateway, Zuul. Service mesh integration (Istio, Linkerd). Cloud-native gateways. Programmable gateways. Open source and commercial options.' }
      ],
      description: 'Single entry point for clients that routes requests, handles cross-cutting concerns, and aggregates responses.'
    },
    {
      id: 'circuit-breaker', x: 580, y: 140, width: 350, height: 160,
      icon: '🔌', title: 'Circuit Breaker Pattern', color: 'indigo',
      details: [
        { name: 'Failure Detection', explanation: 'Monitors service call failures. Tracks success/failure rates. Timeout detection. Exceptions monitoring. Configurable thresholds. Prevents cascading failures. Fast failure instead of waiting. Protects downstream services.' },
        { name: 'Circuit States', explanation: 'Closed: normal operation, requests pass through. Open: threshold exceeded, fail fast without calling service. Half-Open: test if service recovered. Automatic state transitions. Configurable timeout before testing recovery.' },
        { name: 'Fallback Mechanisms', explanation: 'Default response when circuit open. Cached data. Degraded functionality. Static content. Queuing for later processing. Graceful degradation. User-friendly error messages. Maintain partial system functionality.' },
        { name: 'Health Checks', explanation: 'Periodic health checks in half-open state. Successful calls close circuit. Failed calls reopen circuit. Configurable probe frequency. Active vs passive health checks. Service discovery integration. Automatic recovery.' },
        { name: 'Metrics & Monitoring', explanation: 'Track circuit state changes. Failure rates. Response times. Recovery metrics. Alerting on circuit open. Dashboard visibility. Identify problem services quickly. Historical data for analysis.' },
        { name: 'Implementation', explanation: 'Netflix Hystrix (deprecated but influential). Resilience4j (modern replacement). Spring Cloud Circuit Breaker abstraction. Istio/Envoy service mesh. Polly (.NET). Configuration per service. Annotations or programmatic.' }
      ],
      description: 'Prevents cascading failures by detecting faults and stopping calls to failing services until recovery.'
    },
    {
      id: 'service-discovery', x: 580, y: 340, width: 350, height: 160,
      icon: '🔍', title: 'Service Discovery Pattern', color: 'indigo',
      details: [
        { name: 'Service Registry', explanation: 'Centralized database of service instances. Service location information: host, port, protocol. Metadata tags. Health status. Dynamic inventory of running services. Services register on startup. Consul, Eureka, etcd, ZooKeeper.' },
        { name: 'Service Registration', explanation: 'Self-registration: service registers itself. Third-party registration: platform registers service. Heartbeats to maintain registration. Deregistration on shutdown. Automatic cleanup of dead instances. Metadata updates. Health check endpoints.' },
        { name: 'Client-Side Discovery', explanation: 'Client queries service registry. Client selects instance (load balancing). Direct communication to service. Netflix Eureka pattern. More network hops. Client-side load balancing. Ribbon, Spring Cloud LoadBalancer. Smart clients.' },
        { name: 'Server-Side Discovery', explanation: 'Client calls load balancer/router. Load balancer queries registry. Load balancer routes to service. AWS ELB, NGINX. Simpler clients. Centralized load balancing. Additional network hop. Better for diverse clients.' },
        { name: 'Health Checks', explanation: 'Service health monitoring. Active checks by registry. Passive health monitoring. TTL-based registration. Multiple health indicators. Graceful shutdown. Only route to healthy instances. Remove unhealthy from rotation.' },
        { name: 'Service Mesh Integration', explanation: 'Istio, Linkerd handle discovery transparently. Sidecar proxies. Automatic service registration. Traffic management. No application code changes. Platform-level discovery. Cloud-native approach. Kubernetes service discovery.' }
      ],
      description: 'Enables automatic detection of service instances through dynamic registry for location transparency.'
    },
    {
      id: 'config-server', x: 80, y: 440, width: 350, height: 160,
      icon: '⚙️', title: 'Config Server Pattern', color: 'indigo',
      details: [
        { name: 'Externalized Configuration', explanation: 'Configuration outside application code. Environment-specific properties. No rebuilding for config changes. Version controlled configuration. Centralized management. Application, service, environment-specific configs. Separation of concerns.' },
        { name: 'Configuration Storage', explanation: 'Git repository backend (Spring Cloud Config). Database storage. Consul KV store. etcd. AWS Parameter Store. Azure App Configuration. Vault for secrets. Version history. Rollback capability. Audit trail.' },
        { name: 'Dynamic Refresh', explanation: 'Update config without restart. Push updates via webhook. Pull-based periodic refresh. @RefreshScope in Spring. Feature flags. A/B testing configurations. Gradual rollout of changes. Hot reloading properties.' },
        { name: 'Environment Profiles', explanation: 'Different configs for dev, test, prod. Profile-specific property files. Inheritance and overrides. Common base configuration. Environment-specific secrets. Consistency across environments. Reduced configuration errors.' },
        { name: 'Encryption & Secrets', explanation: 'Encrypt sensitive properties. Integration with HashiCorp Vault. AWS KMS. Azure Key Vault. Decrypt on service startup. Separate secret management. Never commit secrets to git. Rotation policies. Audit access.' },
        { name: 'High Availability', explanation: 'Cluster config servers. Caching in services. Graceful degradation if config server down. Fast fail for critical configs. Service starts with cached/default config. Retry mechanisms. Multiple config sources.' }
      ],
      description: 'Centralized external configuration management for microservices across all environments.'
    },
    {
      id: 'saga-pattern', x: 580, y: 540, width: 350, height: 160,
      icon: '🔄', title: 'Saga Pattern', color: 'indigo',
      details: [
        { name: 'Distributed Transaction', explanation: 'Sequence of local transactions across services. No two-phase commit. Eventual consistency. Each service updates own database. Publishes events or sends commands. Long-running business processes. Order, payment, inventory, shipping coordination.' },
        { name: 'Orchestration-Based', explanation: 'Central orchestrator coordinates saga. Saga Execution Coordinator (SEC). Defines saga flow. Sends commands to participants. Handles responses. State machine for process. Easier to understand and debug. Single point of coordination.' },
        { name: 'Choreography-Based', explanation: 'Decentralized coordination via events. Each service subscribes to events and publishes new events. No central coordinator. Event-driven architecture. More loosely coupled. Harder to visualize flow. No single point of failure. Event sourcing integration.' },
        { name: 'Compensating Transactions', explanation: 'Semantic undo for completed steps. Not ACID rollback. Business logic compensation. RefundPayment for ChargePayment. CancelReservation for ReserveInventory. Idempotent compensation. May not restore exact previous state. Best-effort rollback.' },
        { name: 'Failure Handling', explanation: 'Backward recovery: compensate all completed steps. Forward recovery: retry until success. Timeout handling. Manual intervention for unrecoverable errors. Dead letter queues. Saga log for tracking state. Alerting and monitoring. Correlation IDs.' },
        { name: 'Implementation Considerations', explanation: 'Idempotency of operations. Duplicate message handling. Saga state persistence. Exactly-once semantics. Timeout configuration. Monitoring saga execution. Testing strategies. Frameworks: Axon, Eventuate, Camunda. Message infrastructure.' }
      ],
      description: 'Manages distributed transactions across microservices using sequence of local transactions with compensations.'
    },
    {
      id: 'cqrs-pattern', x: 1080, y: 240, width: 350, height: 160,
      icon: '📊', title: 'CQRS Pattern', color: 'indigo',
      details: [
        { name: 'Separation of Concerns', explanation: 'Commands: change state, no return value. Queries: read data, no state change. Different models for read and write. Separate databases possible. Independent scaling. Optimized data structures for each. Clear intent in code.' },
        { name: 'Command Model', explanation: 'Handles state changes. Domain-driven design aggregates. Business logic and validation. Normalized schema. ACID transactions. Publishes domain events. Optimized for writes. Ensures consistency and invariants. Single source of truth.' },
        { name: 'Query Model', explanation: 'Optimized for reads. Denormalized views. Eventually consistent. Multiple specialized read models. No business logic. Materialized views. Different storage technology (NoSQL, search engines). Fast queries. Cache-friendly.' },
        { name: 'Event-Driven Sync', explanation: 'Command side publishes events. Query side subscribes and updates read models. Message queue or event stream (Kafka). Asynchronous processing. Eventual consistency. Multiple subscribers possible. Replay events to rebuild views.' },
        { name: 'Scalability Benefits', explanation: 'Scale reads and writes independently. Most systems are read-heavy. Read replicas of query models. Write model can be highly consistent. Read models can sacrifice consistency for speed. Geographic distribution of read models.' },
        { name: 'Use Cases & Trade-offs', explanation: 'Complex domains with different read/write patterns. High read volume. Collaborative systems. Event sourcing synergy. Trade-offs: increased complexity, eventual consistency, duplicate data. Not needed for simple CRUD. Consider carefully.' }
      ],
      description: 'Separates read and write operations into distinct models for independent optimization and scaling.'
    },
    {
      id: 'event-sourcing', x: 1080, y: 440, width: 350, height: 160,
      icon: '📜', title: 'Event Sourcing Pattern', color: 'indigo',
      details: [
        { name: 'Event Store', explanation: 'Append-only log of domain events. Events are immutable facts. Complete history of all changes. Event store is database. Never update/delete events. Only append new events. OrderCreated, ItemAdded, OrderShipped. Current state derived from events.' },
        { name: 'Event Replay', explanation: 'Rebuild aggregate state by replaying events. Load events for aggregate. Apply each event in sequence. Compute current state. Time travel to any point. Debugging capabilities. Create new projections. What-if analysis possible.' },
        { name: 'Snapshots', explanation: 'Performance optimization for long event streams. Periodic state captures. Load snapshot then apply subsequent events. Configurable snapshot frequency. Reduce replay time. Trade-off: storage vs performance. Automatic snapshot creation.' },
        { name: 'Event Versioning', explanation: 'Events schema evolves over time. Upcasting old events to new versions. Multiple versions coexist. Event transformers. Weak schema flexibility. Migration strategies. Backward compatibility. Versioned event types. Tolerant readers.' },
        { name: 'Projections & Views', explanation: 'Derive read models from events. Multiple projections from same events. Real-time or batch processing. Materialized views. Subscribe to event stream. Update projections. Different databases per view. Specialized for queries.' },
        { name: 'Benefits & Challenges', explanation: 'Benefits: audit trail, temporal queries, debugging, event-driven integration. Challenges: complexity, eventual consistency, query difficulty, steep learning curve. Event store technology: EventStore, Kafka, custom. Not for all domains.' }
      ],
      description: 'Stores all changes as sequence of immutable events rather than current state for complete audit trail.'
    },
    {
      id: 'sidecar-pattern', x: 1080, y: 640, width: 350, height: 140,
      icon: '🛸', title: 'Sidecar Pattern', color: 'indigo',
      details: [
        { name: 'Co-Located Helper', explanation: 'Helper component deployed alongside main application. Separate process but same host/pod. Shares resources with main app. Provides supporting features. Decouples cross-cutting concerns. Polyglot microservices support. Service mesh foundation.' },
        { name: 'Common Use Cases', explanation: 'Service mesh proxies (Envoy, Linkerd). Logging and monitoring agents. Configuration watchers. Security enforcers. Circuit breakers. Service discovery clients. Protocol translation. TLS termination. Observability instrumentation.' },
        { name: 'Communication Patterns', explanation: 'Localhost communication between app and sidecar. Fast IPC. Sidecar handles network calls. Transparent to application. Intercepts inbound/outbound traffic. Proxy pattern. Application unaware of sidecar functionality. Protocol bridging.' },
        { name: 'Deployment', explanation: 'Kubernetes sidecar containers. Docker Compose multi-container. Same lifecycle as main app. Started and stopped together. Shared volumes. Network namespace sharing. Resource allocation. Health checks for both containers.' },
        { name: 'Benefits', explanation: 'Technology agnostic (any language). Reusable across services. Independent versioning. Reduces application complexity. Centralized configuration. Easy updates to cross-cutting concerns. Consistent behavior across services. Separation of concerns.' }
      ],
      description: 'Helper component deployed alongside application providing supporting features like logging, monitoring, and proxying.'
    }
  ]

  const handleComponentClick = (component) => {
    setSelectedComponent(component)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedComponent(null)
    setSelectedConcept(null)
  }

  const handleConceptClick = (concept) => {
    setSelectedConcept(concept)
  }

  return (
    <div style={{
      padding: '2rem',
      maxWidth: '95%',
      margin: '120px auto 0',
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 20px 40px -10px rgba(0, 0, 0, 0.15)',
      border: '3px solid rgba(99, 102, 241, 0.4)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '2rem'
      }}>
        <button
          onClick={onBack}
          style={{
            padding: '0.75rem 1.5rem',
            fontSize: '1rem',
            fontWeight: '600',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            transition: 'all 0.2s ease'
          }}
        >
          ← Back to Menu
        </button>
        <h1 style={{
          fontSize: '2.5rem',
          fontWeight: '800',
          color: '#1f2937',
          margin: 0,
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
        }}>
          Microservice Design Patterns
        </h1>
        <div style={{ width: '120px' }}></div>
      </div>

      <div style={{
        backgroundColor: 'rgba(99, 102, 241, 0.05)',
        padding: '2.5rem 10rem',
        borderRadius: '16px',
        border: '3px solid rgba(99, 102, 241, 0.3)',
        marginBottom: '2rem'
      }}>
        <p style={{
          fontSize: '1.3rem',
          color: '#374151',
          fontWeight: '500',
          margin: 0,
          lineHeight: '1.8',
          textAlign: 'center'
        }}>
          Microservice Design Patterns: API Gateway for unified entry, Circuit Breaker for resilience,
          Service Discovery for dynamic location, Config Server for centralized configuration,
          Saga for distributed transactions, CQRS for read/write separation, Event Sourcing, and Sidecar pattern.
        </p>
      </div>

      <ModernDiagram
        components={components}
        onComponentClick={handleComponentClick}
        title="Essential Microservice Design Patterns"
        width={1400}
        height={800}
        containerWidth={1800}
      />

      {/* Modal */}
      {isModalOpen && selectedComponent && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2.5rem',
            borderRadius: '16px',
            maxWidth: '1400px',
            width: '95%',
            maxHeight: '85vh',
            overflowY: 'auto',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)',
            border: '3px solid rgba(99, 102, 241, 0.4)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '2rem'
            }}>
              <h2 style={{
                fontSize: '2rem',
                fontWeight: '800',
                color: '#1f2937',
                margin: 0,
                fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
              }}>
                {selectedComponent.icon} {selectedComponent.title}
              </h2>
              <button
                onClick={closeModal}
                style={{
                  padding: '0.5rem 1rem',
                  fontSize: '1.25rem',
                  fontWeight: '600',
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
              >
                ✕
              </button>
            </div>

            <div style={{
              backgroundColor: 'rgba(99, 102, 241, 0.05)',
              padding: '1.5rem',
              borderRadius: '12px',
              border: '2px solid rgba(99, 102, 241, 0.2)',
              marginBottom: '2rem'
            }}>
              <p style={{
                fontSize: '1.1rem',
                color: '#374151',
                fontWeight: '500',
                margin: 0,
                lineHeight: '1.6'
              }}>
                {selectedComponent.description}
              </p>
            </div>

            <div style={{
              display: 'grid',
              gridTemplateColumns: selectedConcept ? '1fr 1fr' : '1fr',
              gap: '2rem'
            }}>
              <div>
                <h3 style={{
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  color: '#1f2937',
                  marginBottom: '1rem'
                }}>
                  Key Features
                </h3>
                <div style={{
                  display: 'grid',
                  gap: '0.75rem'
                }}>
                  {selectedComponent.details.map((detail, idx) => (
                    <div
                      key={idx}
                      onClick={() => handleConceptClick(detail)}
                      style={{
                        backgroundColor: selectedConcept?.name === detail.name
                          ? 'rgba(99, 102, 241, 0.15)'
                          : 'rgba(99, 102, 241, 0.1)',
                        padding: '0.75rem',
                        borderRadius: '8px',
                        border: selectedConcept?.name === detail.name
                          ? '2px solid rgba(99, 102, 241, 0.4)'
                          : '2px solid rgba(99, 102, 241, 0.2)',
                        fontSize: '0.95rem',
                        fontWeight: '500',
                        color: selectedConcept?.name === detail.name
                          ? '#4f46e5'
                          : '#3730a3',
                        cursor: 'pointer',
                        transition: 'all 0.2s ease',
                        transform: 'scale(1)'
                      }}
                      onMouseEnter={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(99, 102, 241, 0.15)'
                          e.target.style.transform = 'scale(1.02)'
                          e.target.style.borderColor = 'rgba(99, 102, 241, 0.4)'
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (selectedConcept?.name !== detail.name) {
                          e.target.style.backgroundColor = 'rgba(99, 102, 241, 0.1)'
                          e.target.style.transform = 'scale(1)'
                          e.target.style.borderColor = 'rgba(99, 102, 241, 0.2)'
                        }
                      }}
                    >
                      • {detail.name}
                      {selectedConcept?.name === detail.name && (
                        <span style={{
                          fontSize: '0.8rem',
                          opacity: 0.8,
                          marginLeft: '0.5rem',
                          fontWeight: '600'
                        }}>
                          ← Selected
                        </span>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {selectedConcept && (
                <div>
                  <h3 style={{
                    fontSize: '1.25rem',
                    fontWeight: '700',
                    color: '#1f2937',
                    marginBottom: '1rem'
                  }}>
                    {selectedConcept.name}
                  </h3>

                  <div style={{
                    backgroundColor: 'rgba(99, 102, 241, 0.05)',
                    padding: '1.5rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(99, 102, 241, 0.2)',
                    marginBottom: '1.5rem'
                  }}>
                    <p style={{
                      fontSize: '1rem',
                      color: '#374151',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.7',
                      textAlign: 'justify'
                    }}>
                      {selectedConcept.explanation}
                    </p>
                  </div>

                  <div style={{
                    backgroundColor: 'rgba(59, 130, 246, 0.05)',
                    padding: '1.25rem',
                    borderRadius: '12px',
                    border: '2px solid rgba(59, 130, 246, 0.2)'
                  }}>
                    <h4 style={{
                      fontSize: '1rem',
                      fontWeight: '700',
                      color: '#1e40af',
                      margin: '0 0 0.75rem 0'
                    }}>
                      💡 Key Takeaway
                    </h4>
                    <p style={{
                      fontSize: '0.9rem',
                      color: '#1e40af',
                      fontWeight: '500',
                      margin: 0,
                      lineHeight: '1.5',
                      fontStyle: 'italic'
                    }}>
                      {selectedConcept.name} is a critical microservice pattern that enables resilient, scalable, and maintainable distributed systems.
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

    </div>
  )
}

export default MicroservicePatterns