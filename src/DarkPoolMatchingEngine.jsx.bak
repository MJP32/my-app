import { useState } from 'react'

const ModernDiagram = ({ components, onComponentClick, title, width = 1400, height = 800, containerWidth = 1800 }) => {
  const [hoveredComponent, setHoveredComponent] = useState(null)

  return (
    <div style={{
      width: '100%',
      maxWidth: `${containerWidth}px`,
      margin: '0 auto',
      backgroundColor: '#f8fafc',
      borderRadius: '16px',
      padding: '2rem',
      boxShadow: '0 10px 30px -5px rgba(0, 0, 0, 0.1)',
      border: '2px solid #e2e8f0'
    }}>
      <h3 style={{
        textAlign: 'center',
        marginBottom: '2rem',
        fontSize: '1.75rem',
        fontWeight: '800',
        color: '#1e293b',
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
      }}>
        {title}
      </h3>

      <svg width="100%" height={height} viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>
        <defs>
          <linearGradient id="blueGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#3b82f6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#1e40af" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="greenGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#10b981" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#059669" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#8b5cf6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#7c3aed" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="redGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#ef4444" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#dc2626" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="orangeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#f59e0b" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#d97706" stopOpacity="0.9"/>
          </linearGradient>
          <linearGradient id="tealGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#14b8a6" stopOpacity="0.8"/>
            <stop offset="100%" stopColor="#0d9488" stopOpacity="0.9"/>
          </linearGradient>
        </defs>

        {/* Connecting lines */}
        <g stroke="#64748b" strokeWidth="3" strokeOpacity="0.6" fill="none">
          <line x1="200" y1="200" x2="400" y2="300" strokeDasharray="8,4"/>
          <line x1="600" y1="200" x2="400" y2="300" strokeDasharray="8,4"/>
          <line x1="1000" y1="200" x2="800" y2="300" strokeDasharray="8,4"/>
          <line x1="1200" y1="200" x2="800" y2="300" strokeDasharray="8,4"/>
          <line x1="400" y1="400" x2="600" y2="500" strokeDasharray="8,4"/>
          <line x1="800" y1="400" x2="600" y2="500" strokeDasharray="8,4"/>
          <line x1="600" y1="600" x2="700" y2="700" strokeDasharray="8,4"/>
        </g>

        {/* Component rectangles */}
        {components.map((component) => (
          <g key={component.id}>
            <rect
              x={component.x}
              y={component.y}
              width={component.width}
              height={component.height}
              rx="12"
              ry="12"
              fill={`url(#${component.color}Gradient)`}
              stroke={hoveredComponent === component.id ? '#1e293b' : '#64748b'}
              strokeWidth={hoveredComponent === component.id ? '4' : '2'}
              style={{
                cursor: 'pointer',
                filter: hoveredComponent === component.id ? 'drop-shadow(0 8px 16px rgba(0,0,0,0.2))' : 'drop-shadow(0 4px 8px rgba(0,0,0,0.1))',
                transform: hoveredComponent === component.id ? 'scale(1.02)' : 'scale(1)',
                transformOrigin: `${component.x + component.width/2}px ${component.y + component.height/2}px`,
                transition: 'all 0.2s ease'
              }}
              onMouseEnter={() => setHoveredComponent(component.id)}
              onMouseLeave={() => setHoveredComponent(null)}
              onClick={() => onComponentClick && onComponentClick(component)}
            />

            {/* Icon */}
            <text
              x={component.x + component.width/2}
              y={component.y + 40}
              textAnchor="middle"
              fontSize="52"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.icon}
            </text>

            {/* Title */}
            <text
              x={component.x + component.width/2}
              y={component.y + 85}
              textAnchor="middle"
              fontSize="20"
              fontWeight="700"
              fill="white"
              style={{ userSelect: 'none', pointerEvents: 'none' }}
            >
              {component.title}
            </text>

            {/* Details */}
            {component.details && component.details.map((detail, idx) => (
              <text
                key={idx}
                x={component.x + component.width/2}
                y={component.y + 115 + (idx * 18)}
                textAnchor="middle"
                fontSize="12"
                fontWeight="500"
                fill="rgba(255,255,255,0.9)"
                style={{ userSelect: 'none', pointerEvents: 'none' }}
              >
                {detail}
              </text>
            ))}

            {/* Hover tooltip */}
            {hoveredComponent === component.id && (
              <g>
                <rect
                  x={component.x + component.width + 20}
                  y={component.y}
                  width="300"
                  height="140"
                  rx="8"
                  ry="8"
                  fill="#1e293b"
                  stroke="#64748b"
                  strokeWidth="2"
                  style={{ filter: 'drop-shadow(0 8px 16px rgba(0,0,0,0.3))' }}
                />
                <text
                  x={component.x + component.width + 35}
                  y={component.y + 25}
                  fontSize="14"
                  fontWeight="700"
                  fill="#60a5fa"
                >
                  Performance Metrics
                </text>
                {Object.entries(component.metrics).map(([key, value], idx) => (
                  <text
                    key={idx}
                    x={component.x + component.width + 35}
                    y={component.y + 50 + (idx * 20)}
                    fontSize="12"
                    fontWeight="500"
                    fill="white"
                  >
                    {key}: {value}
                  </text>
                ))}
              </g>
            )}
          </g>
        ))}
      </svg>
    </div>
  )
}

function DarkPoolMatchingEngine({ onBack }) {
  const [selectedComponent, setSelectedComponent] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  const components = [
    {
      id: 'order-ingestion', x: 80, y: 140, width: 350, height: 200,
      icon: '📥', title: 'Order Ingestion Gateway', color: 'blue',
      details: ['FIX 4.4/5.0 Protocol', 'Sub-microsecond Latency', '1M+ Orders/sec', 'Multi-venue Support', 'Order Validation', 'Risk Checks'],
      metrics: { latency: '<100ns', throughput: '1.2M ops/s', uptime: '99.999%', protocols: '15+' },
      description: 'High-performance order ingestion system supporting multiple protocols with ultra-low latency processing and comprehensive risk validation.'
    },
    {
      id: 'matching-engine', x: 480, y: 140, width: 350, height: 200,
      icon: '⚡', title: 'Core Matching Engine', color: 'green',
      details: ['Price-Time Priority', 'Hidden Liquidity', 'Iceberg Orders', 'TWAP/VWAP Algo', 'Anti-Gaming Logic', 'Order Book Depth'],
      metrics: { matches: '2.5M/day', algorithms: '25+', latency: '<50ns', accuracy: '100%' },
      description: 'Advanced matching algorithms with sophisticated order types, anti-gaming protection, and institutional-grade execution quality.'
    },
    {
      id: 'liquidity-pool', x: 880, y: 140, width: 350, height: 200,
      icon: '🌊', title: 'Dark Liquidity Pool', color: 'purple',
      details: ['Hidden Order Book', 'Institutional Blocks', '$500M+ Daily Volume', 'Cross-venue Liquidity', 'Size Discovery', 'Price Improvement'],
      metrics: { volume: '$750M', blocks: '15K+', improvement: '2.3bps', venues: '45+' },
      description: 'Deep liquidity aggregation from institutional sources with advanced size discovery and minimal market impact execution.'
    },
    {
      id: 'smart-routing', x: 280, y: 380, width: 350, height: 200,
      icon: '🧠', title: 'Smart Order Router', color: 'red',
      details: ['ML-Based Routing', 'Venue Selection', 'Cost Analysis', 'Impact Prediction', 'Dynamic Allocation', 'Execution Analytics'],
      metrics: { venues: '120+', algorithms: '50+', savings: '3.2bps', accuracy: '94.8%' },
      description: 'Machine learning-powered routing system optimizing execution across multiple venues with predictive cost analysis.'
    },
    {
      id: 'risk-management', x: 680, y: 380, width: 350, height: 200,
      icon: '🛡️', title: 'Risk Management', color: 'orange',
      details: ['Real-time Monitoring', 'Position Limits', 'Credit Checks', 'Compliance Rules', 'Anomaly Detection', 'Circuit Breakers'],
      metrics: { checks: '50M/day', response: '<10ns', alerts: '99.7%', compliance: '100%' },
      description: 'Comprehensive risk framework with real-time monitoring, automated controls, and regulatory compliance validation.'
    },
    {
      id: 'analytics-engine', x: 480, y: 620, width: 350, height: 200,
      icon: '📊', title: 'Analytics & Reporting', color: 'teal',
      details: ['Transaction Cost Analysis', 'Market Impact Studies', 'Performance Attribution', 'Regulatory Reporting', 'Custom Dashboards', 'API Integration'],
      metrics: { reports: '500+/day', metrics: '200+', latency: '<1ms', accuracy: '99.99%' },
      description: 'Advanced analytics platform providing comprehensive execution analysis, regulatory reporting, and performance insights.'
    }
  ]

  const handleComponentClick = (component) => {
    setSelectedComponent(component)
    setIsModalOpen(true)
  }

  const closeModal = () => {
    setIsModalOpen(false)
    setSelectedComponent(null)
  }

  return (
    <div style={{
      padding: '2rem',
      maxWidth: '2000px',
      margin: '120px auto 0',
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 20px 40px -10px rgba(0, 0, 0, 0.15)',
      border: '3px solid rgba(59, 130, 246, 0.4)'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '2rem'
      }}>
        <button
          onClick={onBack}
          style={{
            padding: '0.75rem 1.5rem',
            fontSize: '1rem',
            fontWeight: '600',
            backgroundColor: '#6b7280',
            color: 'white',
            border: 'none',
            borderRadius: '8px',
            cursor: 'pointer',
            transition: 'all 0.2s ease'
          }}
        >
          ← Back to Menu
        </button>
        <h1 style={{
          fontSize: '2.5rem',
          fontWeight: '800',
          color: '#1f2937',
          margin: 0,
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
        }}>
          🌊 Dark Pool Matching Engine
        </h1>
        <div style={{ width: '120px' }}></div>
      </div>

      <div style={{
        backgroundColor: 'rgba(59, 130, 246, 0.05)',
        padding: '1.5rem',
        borderRadius: '12px',
        border: '2px solid rgba(59, 130, 246, 0.2)',
        marginBottom: '2rem'
      }}>
        <p style={{
          fontSize: '1.1rem',
          color: '#374151',
          fontWeight: '500',
          margin: 0,
          lineHeight: '1.6',
          textAlign: 'center'
        }}>
          Advanced institutional trading platform providing anonymous execution with minimal market impact.
          Features sophisticated matching algorithms, deep liquidity aggregation, and enterprise-grade risk controls
          for large block trading with sub-microsecond latency.
        </p>
      </div>

      <ModernDiagram
        components={components}
        onComponentClick={handleComponentClick}
        title="Dark Pool Architecture Overview"
        width={1400}
        height={800}
        containerWidth={1800}
      />

      <div style={{
        marginTop: '3rem',
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
        gap: '1.5rem'
      }}>
        <div style={{
          backgroundColor: 'rgba(34, 197, 94, 0.1)',
          padding: '1.5rem',
          borderRadius: '12px',
          border: '2px solid rgba(34, 197, 94, 0.3)'
        }}>
          <h3 style={{
            color: '#166534',
            fontSize: '1.25rem',
            fontWeight: '700',
            marginBottom: '1rem'
          }}>
            🎯 Key Performance Metrics
          </h3>
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '0.75rem',
            fontSize: '0.9rem'
          }}>
            <div><strong>Daily Volume:</strong> $750M+</div>
            <div><strong>Order Latency:</strong> &lt;100ns</div>
            <div><strong>Match Rate:</strong> 2.5M/day</div>
            <div><strong>Uptime:</strong> 99.999%</div>
            <div><strong>Venues:</strong> 120+ connected</div>
            <div><strong>Cost Savings:</strong> 3.2 bps avg</div>
          </div>
        </div>

        <div style={{
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          padding: '1.5rem',
          borderRadius: '12px',
          border: '2px solid rgba(59, 130, 246, 0.3)'
        }}>
          <h3 style={{
            color: '#1e40af',
            fontSize: '1.25rem',
            fontWeight: '700',
            marginBottom: '1rem'
          }}>
            🏛️ Regulatory Compliance
          </h3>
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr',
            gap: '0.5rem',
            fontSize: '0.9rem'
          }}>
            <div>• MiFID II Best Execution</div>
            <div>• Reg NMS Compliance</div>
            <div>• ESMA Dark Pool Rules</div>
            <div>• SEC Alternative Trading System</div>
            <div>• Real-time Trade Reporting</div>
            <div>• Audit Trail Maintenance</div>
          </div>
        </div>

        <div style={{
          backgroundColor: 'rgba(139, 92, 246, 0.1)',
          padding: '1.5rem',
          borderRadius: '12px',
          border: '2px solid rgba(139, 92, 246, 0.3)'
        }}>
          <h3 style={{
            color: '#7c3aed',
            fontSize: '1.25rem',
            fontWeight: '700',
            marginBottom: '1rem'
          }}>
            🔧 Advanced Features
          </h3>
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr',
            gap: '0.5rem',
            fontSize: '0.9rem'
          }}>
            <div>• Iceberg & Hidden Orders</div>
            <div>• TWAP/VWAP Algorithms</div>
            <div>• Cross-venue Liquidity</div>
            <div>• Anti-gaming Protection</div>
            <div>• Size Discovery Protocol</div>
            <div>• Price Improvement Engine</div>
          </div>
        </div>
      </div>

      {/* Modal */}
      {isModalOpen && selectedComponent && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '2.5rem',
            borderRadius: '16px',
            maxWidth: '1000px',
            width: '90%',
            maxHeight: '80vh',
            overflowY: 'auto',
            boxShadow: '0 25px 50px -12px rgba(0, 0, 0, 0.5)',
            border: '3px solid rgba(59, 130, 246, 0.4)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '2rem'
            }}>
              <h2 style={{
                fontSize: '2rem',
                fontWeight: '800',
                color: '#1f2937',
                margin: 0,
                fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
              }}>
                {selectedComponent.icon} {selectedComponent.title}
              </h2>
              <button
                onClick={closeModal}
                style={{
                  padding: '0.5rem 1rem',
                  fontSize: '1.25rem',
                  fontWeight: '600',
                  backgroundColor: '#ef4444',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  transition: 'all 0.2s ease'
                }}
              >
                ✕
              </button>
            </div>

            <div style={{
              backgroundColor: 'rgba(59, 130, 246, 0.05)',
              padding: '1.5rem',
              borderRadius: '12px',
              border: '2px solid rgba(59, 130, 246, 0.2)',
              marginBottom: '2rem'
            }}>
              <p style={{
                fontSize: '1.1rem',
                color: '#374151',
                fontWeight: '500',
                margin: 0,
                lineHeight: '1.6'
              }}>
                {selectedComponent.description}
              </p>
            </div>

            <div style={{
              display: 'grid',
              gridTemplateColumns: '1fr 1fr',
              gap: '2rem'
            }}>
              <div>
                <h3 style={{
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  color: '#1f2937',
                  marginBottom: '1rem'
                }}>
                  Key Features
                </h3>
                <div style={{
                  display: 'grid',
                  gap: '0.75rem'
                }}>
                  {selectedComponent.details.map((detail, idx) => (
                    <div key={idx} style={{
                      backgroundColor: 'rgba(34, 197, 94, 0.1)',
                      padding: '0.75rem',
                      borderRadius: '8px',
                      border: '2px solid rgba(34, 197, 94, 0.2)',
                      fontSize: '0.95rem',
                      fontWeight: '500',
                      color: '#166534'
                    }}>
                      • {detail}
                    </div>
                  ))}
                </div>
              </div>

              <div>
                <h3 style={{
                  fontSize: '1.25rem',
                  fontWeight: '700',
                  color: '#1f2937',
                  marginBottom: '1rem'
                }}>
                  Performance Metrics
                </h3>
                <div style={{
                  display: 'grid',
                  gap: '0.75rem'
                }}>
                  {Object.entries(selectedComponent.metrics).map(([key, value], idx) => (
                    <div key={idx} style={{
                      backgroundColor: 'rgba(59, 130, 246, 0.1)',
                      padding: '0.75rem',
                      borderRadius: '8px',
                      border: '2px solid rgba(59, 130, 246, 0.2)',
                      display: 'flex',
                      justifyContent: 'space-between',
                      fontSize: '0.95rem',
                      fontWeight: '500'
                    }}>
                      <span style={{ color: '#1e40af', textTransform: 'capitalize' }}>{key}:</span>
                      <span style={{ color: '#1f2937', fontWeight: '700' }}>{value}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default DarkPoolMatchingEngine